HERP - HERP Extremely Reactive Protocol
==================================

This is my last university project (if you exclude the thesis). The
project aims at satisfying the requirement:

    Design and implement a unicast routing protocol that is
    reactive, i.e., a route to destination is established only on
    demand.

    Hint:
    -----

    when a route is needed flood the network and build the route
    using the reverse path from the destination to the source

    Optional features:
    ------------------

    buffer previously used routes (validation mechanism needed)
    compute a backup route to use in case of failure of the main
    one

    Means of verification:
    ----------------------

    to test your protocol set up a random topology and let each
    node periodically send a message to all the other nodes

How to compile and run stuff
----------------------------

The Project works on Tossim (for the moment it has been tested only on the
simulator, and probably will never be tested on a real deployment).

  - In order to **compile** the program just run `make micaz sim` (the
    makefile is tested to be working under a CentOS system, but should not
    give problems)

  - There are two ways of **running** the program:
    + Through the `Test.py` python script;
    + Through the C++ program which can be obtained by running
      `make -f Makefile.test`

Both programs will load the topology from a topology file, which for
semplicity, is just constantly called `topology`. For the moment the file
must be placed in the `src` directory (the same from which the program is
run).

Topology file
-------------

The topology representation is simply a file in which each row contains
two node identifiers _x_ and _y_. The program will create a link from _x_
to _y_ and from _y_ to _x_ with a link gain of _-40 dB_.

### Example of topology file:

    0 1
    0 2
    0 3
    0 4
    1 2
    1 3
    1 4
    2 4
    3 4

Topologies can be generated randomly through the `utils/random-topology`
script (see Utility Scripts section).

Utility Scripts
---------------

The `utils` directory contains some useful script which will be listed in
this section (more script could be added in future)

### utils/random-topology

Generate random topology and put them on the standard output. The
topologies can be generated both in a way suited for the main application
testing programs and in a dot-compliant way (so topology maps can be
pictured.

### utils/parse-opid

During the run, each simulated node uses a certain number of operation
identifiers, which are released as the operation concludes (more details
on this principle soon in this document).

The component managing the operation identifiers log what's happening, and
the testing system puts this output on a file named `opid.log`. The
`parse-opid` program can be run on this file in order to obtain an
aggregate view on how the operations are distributed on the system.
